import os
import re

import pandas as pd
import PyPDF4 as pdf

from datetime import datetime

MITV_LOC = 22

NR_HEADER_MAPPER = {
    'Image ID': 'image_id',
    'Group name': 'group_name',
    'Study ID': 'study_id',
    'Clinical Image ID': 'clinical_image_id',
    'Patient ID': 'patient_id',
    'Gender': 'gender',
    # 'Analysis date': 'analysis_date', not grabbed from PyPDF4
    'Accession Number': 'accession_number',
    'Patient name': 'patient_name',
    'BirthDate': 'birth_date',
    'Age': 'age',
}

NR_RESULTS_MAPPER = {
    'Hippocampal Left-Right Asymmetry Index': 'hippocampal_leftright_asymmetry_index',
    'NR Index': 'hippocampal_asymmetry_nr_index',
    'Z-score': 'hippocampal_asymmetry_zscore',
    'Percentile': 'hippocampal_asymmetry_percentile',
}

NR_TABLE_MAPPER = {
    'Whole Brain Matter': 'whole_brain_matter',
    'Gray Matter': 'gray_matter',
    'White Matter': 'white_matter',
    'Hippocampus': 'hippocampus',
    'Right Hippocampus': 'right_hippocampus',
    'Left Hippocampus': 'left_hippocampus',
    'Amygdala': 'amygdala',
    'Right Amygdala': 'right_amygdala',
    'Left Amygdala': 'left_mygdatal',
    'Putamen': 'putamen',
    'Right Putamen': 'right_putamen',
    'Left Putamen': 'left_putamen',
    'Thalamus': 'thalamus',
    'Right Thalamus': 'right_thalamus',
    'Left Thalamus': 'left_thalamus',
    'Ventral Diencephalon': 'ventral_diencephalon',
    'Right Ventral Diencephalon': 'right_ventral_diencephalon',
    'Left Ventral Diencephalon': 'left_ventral_diencephalon',
    'Pallidum': 'pallidum',
    'Right Pallidum': 'right_pallidum',
    'Left Pallidum': 'left_pallidum',
    'Caudate': 'caudate',
    'Right Caudate': 'right_caudate',
    'Left Caudate': 'left_caudate',
    'Brain Stem': 'brain_stem',
    'Frontal Lobe': 'frontal_labe',
    'Right Frontal Lobe': 'right_frontal_lobe',
    'Left Frontal Lobe': 'left_frontal_lobe',
    'Parietal Lobe': 'parietal_lobe',
    'Right Parietal Lobe': 'right_parietal_lobe',
    'Left Parietal Lobe': 'left_parietal_lobe',
    'Occipital Lobe': 'occipictal_lobe',
    'Right Occipital Lobe': 'right_occipital_lobe',
    'Left Occipital Lobe': 'left_occiptial_lobe',
    'Temporal Lobe': 'temporal_lobe',
    'Right Temporal Lobe': 'right_temporal_lobe',
    'Left Temporal Lobe': 'left_temporal_lobe',
    'Cerebellum': 'cerebellum',
    'Right Cerebellum': 'right_cerebellum',
    'Left Cerebellum': 'left_cerebellum',
    'CSF (+ dura)': 'csf_plus_dura',
    'Lateral Ventricle': 'lateral_ventricle',
    'Right Lateral Ventricle': 'right_lateral_ventricle',
    'Left Lateral Ventricle': 'left_lateral_ventricle'
}

def get_field_locs(working_data, fields):
    """
    Finds fields index locations.

    Parameters
    ----------

    working_data: list-like
        the working data
    fields: list-like
        the field names

    Outputs
    -------

    field_locs: dict
        field-index pairs
    """

    field_locs = {x:i for i,x in enumerate(working_data) if x in fields}

    not_found = set(fields) - set(field_locs)
    if not_found:
        raise Exception(f'Missing fields {not_found}')

    return field_locs

def tokenize_pdf(pdf_file):
    """
    Tokenizes a pdf file.

    Parameters
    ----------

    pdf_file: str
        path to pdf file
    
    Outputs
    -------

    pdf_data: dict
        keys - page number
        values - list of text extracted by PyPDF4 and split by \n
    info: dict
        the pdf information generated by PyPDF4
    """

    pdf_data = {}
    with open(pdf_file, 'rb') as f:
        pdf_fr = pdf.PdfFileReader(f)
        n = pdf_fr.getNumPages()

        for i in range(n):
            pdf_data[i] = pdf_fr.getPage(i).extractText().strip().split('\n')
        info = pdf_fr.getDocumentInfo()

    return pdf_data, info

def parse_text(pdf_data):
    """
    Parses neuroreader files.

    Parameters
    ----------

    pdf_data: dict
        keys - page number
        values - list of text extracted by PyPDF4 and split by \n

    Outputs
    -------

    results: dict
        key - default variable name
        value - variable value
    """

    results = {}
    working_data = pdf_data[0] + pdf_data[1]

    field_locs = get_field_locs(working_data, NR_HEADER_MAPPER)
    field_locs.update(get_field_locs(working_data, NR_RESULTS_MAPPER))
    field_locs.update(get_field_locs(working_data, NR_TABLE_MAPPER))

    for field, loc in field_locs.items():
        if field in NR_HEADER_MAPPER:
            results[NR_HEADER_MAPPER[field]] = working_data[loc + 1]
        elif field in NR_RESULTS_MAPPER:
            results[NR_RESULTS_MAPPER[field]] = working_data[loc + 4]
        else:
            study_field = NR_TABLE_MAPPER[field]
            results[study_field + '_vol_ml'] = working_data[loc + 1]
            results[study_field + '_vol_to_tiv_ratio'] = working_data[loc + 2]
            results[study_field + '_nr_index'] = working_data[loc + 3]
            results[study_field + '_zscore'] = working_data[loc + 4]
            results[study_field + '_percentile'] = working_data[loc + 5]

    results['version'] = pdf_data[0][-1]

    ptn = 'The measured total intracranial volume \(mTIV\) = (\d+) ml.'
    results['mtiv'] = re.search(ptn, pdf_data[0][MITV_LOC]).group(1)

    # split patient name
    patient_names = results['patient_name'].split()
    results['first_name'] = patient_names[1]
    results['last_name'] = patient_names[0]
    if len(patient_names) >= 3:
        results['middle_name'] = patient_names[2]

    # format birthdate
    birthdate = results['birth_date']
    results['birth_date'] = (datetime
        .strptime(birthdate, '%m-%d-%Y')
        .strftime('%Y-%m-%d'))

    # get analysis date
    analysis_date = results['image_id'].split('_')[1]
    results['analysis_date'] = (datetime
            .strptime(analysis_date, '%Y%m%d%H%M%S')
            .strftime('%Y-%m-%d %H:%M:%S'))

    return results

def convert_variable_names(parsed_text, mapper):
    """
    Converts variable names to a new set of variable names.

    Parameters
    ----------

    parsed_text: dict
        key - variable name
        value - variable value
    mapper: dict
        key - variable name
        value - new variable name

    Output
    ------

    results: dict
        key - new variable name
        value - new variable value

    Description
    -----------

    Any keys in parsed_text not found in mapper are excluded with no error.
    """

    results = {}
    for key, new_key in mapper.items():
        results[new_key] = parsed_text[key]

    return results

def read_mapper_file(file_mapper):
    """
    Read the mapper file.

    Parameters
    ----------

    mapper_file: str
        path to the mapper file which should be a csv file

    Output
    ------

    mapper: dict
        key - default key value
        value - new key value
    """

    df = pd.read_csv(file_mapper)
    mapper = {}
    for row in df.itertuples():
        mapper[row['default']] = row['redcap']

    return mapper

def parse_neuroreader(pdf_file, mapper_file=None):
    """
    Parser neuroreader files.

    Parameters
    ----------

    pdf_file: str
        path to pdf file
    mapper_file: str
        path to the mapper file which should be a csv file

    Output
    ------

    results: dict
        key - variable name
        value - variable value
    """

    pdf_data, info = tokenize_pdf(pdf_file)
    parsed = parse_text(pdf_data)

    if mapper_file is not None:
        mapper = read_mapper_file(mapper_file)

        results = {}
        for name, new_name in mapper.items():
            results[new_name] = parsed[name]
    else:
        results = parsed

    return pd.DataFrame(results, index=[0])
        
